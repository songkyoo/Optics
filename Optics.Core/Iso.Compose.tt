<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Optics;

partial class Iso
{
<# for (int n = 2; n <= MaxCount; n++) { #>
    public static Iso<T, TValue<#= n #>> Compose<T, <# for (int i = 1; i < n; i++) { #>TValue<#= i #>, <# } #>TValue<#= n #>>(
        Iso<T, TValue1> iso1,
<# for (int i = 1; i < n - 1; i++) { #>
        Iso<TValue<#= i #>, TValue<#= i + 1 #>> iso<#= i + 1 #>,
<# } #>
        Iso<TValue<#= n - 1 #>, TValue<#= n #>> iso<#= n #>
    )
    {
        return Iso<T, TValue<#= n #>>.Of(
            getter: source =>
            {
                var value0 = source;
<# for (int i = 0; i < n; i++) { #>
                var value<#= i + 1 #> = iso<#= i + 1 #>.Get(value<#= i #>);
<# } #>

                return value<#= n #>;
            },
            constructor: value =>
            {
                var newValue<#= n - 1 #> = iso<#= n #>.Construct(value);
<# for (int i = n - 1; i > 0; i--) { #>
                var newValue<#= i - 1 #> = iso<#= i #>.Construct(newValue<#= i #>);
<# } #>

                return newValue0;
            }
        );
    }

<# } #>
}
