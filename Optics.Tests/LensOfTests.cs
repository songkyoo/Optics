using System.Collections.Immutable;
using Macaron.Optics.Generator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Macaron.Optics.Tests;

public class LensOfTests
{
    private static void Assert_LensOf_Attribute(string sourceCode, string expected)
    {
        var attributeAssembly = typeof(LensOf<>).Assembly;
        var references = AppDomain
            .CurrentDomain
            .GetAssemblies()
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Append(attributeAssembly)
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .ToImmutableArray();

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.InterfaceDelegation.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        foreach (var diagnostic in compilation.GetDiagnostics())
        {
            Console.WriteLine(diagnostic);
        }

        var generator = new LensOfGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var result = driver.RunGenerators(compilation).GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;
        var actual = generatedSources.Length > 1 ? generatedSources[1].SourceText.ToString() : "";

        Assert.That(actual, Is.EqualTo(expected));
    }

    [Test]
    public void When_LensOfAttributeWithoutTypeArgument_Should_UseContainingType()
    {
        Assert_LensOf_Attribute(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Person(string Name, int Age)
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }

            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record Person
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, string> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, string>.Of(
                            getter: static source => source.Name,
                            setter: static (source, value) => source with
                            {
                                Name = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, int> Age = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, int>.Of(
                            getter: static source => source.Age,
                            setter: static (source, value) => source with
                            {
                                Age = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }
}
