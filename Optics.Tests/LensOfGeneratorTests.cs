using System.Collections.Immutable;
using System.Reflection;
using Macaron.Optics.Generator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Macaron.Optics.Tests;

public class LensOfGeneratorTests
{
    private static void AssertGeneratedCode(string sourceCode, string expected)
    {
        var (_, generatedCode) = CompileAndGetResults<LensOfGenerator>(
            sourceCode,
            skipGeneratedCodeCount: 2, // 0, 1번은 LensOfAttribute.g.cs, OptionalOfAttribute.g.cs
            additionalAssemblies: [typeof(LensOf<>).Assembly]
        );

        Assert.That(generatedCode.ReplaceLineEndings(), Is.EqualTo(expected.ReplaceLineEndings()));
    }

    private static (ImmutableArray<Diagnostic> diagnostics, string generatedCode) CompileAndGetResults<T>(
        string sourceCode,
        int skipGeneratedCodeCount,
        Assembly[]? additionalAssemblies = null
    ) where T : IIncrementalGenerator, new()
    {
        var references = AppDomain
            .CurrentDomain
            .GetAssemblies()
            .Concat(additionalAssemblies ?? [])
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .ToImmutableArray();

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.InterfaceDelegation.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        var generator = new T();
        var driver = CSharpGeneratorDriver.Create(generator);

        var result = driver.RunGenerators(compilation).GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;
        var generatedCode = generatedSources.Length > skipGeneratedCodeCount
            ? generatedSources[skipGeneratedCodeCount].SourceText.ToString()
            : "";

        var allDiagnostics = compilation.GetDiagnostics()
            .Concat(result.Diagnostics)
            .ToImmutableArray();

        return (allDiagnostics, generatedCode);
    }

    [Test]
    public void When_LensOfAttributeWithoutTypeArgument_Should_UseContainingType()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Person(string Name, int Age)
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }

            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record Person
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, string> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, string>.Of(
                            getter: static source => source.Name,
                            setter: static (source, value) => source with
                            {
                                Name = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, int> Age = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, int>.Of(
                            getter: static source => source.Age,
                            setter: static (source, value) => source with
                            {
                                Age = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }
}
