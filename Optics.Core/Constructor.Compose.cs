// <auto-generated />
namespace Macaron.Optics;

partial class Constructor
{
    public static Constructor<T, TValue2> Compose<T, TValue1, TValue2>(
        Constructor<T, TValue1> constructor1,
        Constructor<TValue1, TValue2> constructor2
    )
    {
        return Constructor<T, TValue2>.Of(
            constructor: value =>
            {
                var newValue1 = constructor2.Construct(value);
                var newValue0 = constructor1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Constructor<T, TValue3> Compose<T, TValue1, TValue2, TValue3>(
        Constructor<T, TValue1> constructor1,
        Constructor<TValue1, TValue2> constructor2,
        Constructor<TValue2, TValue3> constructor3
    )
    {
        return Constructor<T, TValue3>.Of(
            constructor: value =>
            {
                var newValue2 = constructor3.Construct(value);
                var newValue1 = constructor2.Construct(newValue2);
                var newValue0 = constructor1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Constructor<T, TValue4> Compose<T, TValue1, TValue2, TValue3, TValue4>(
        Constructor<T, TValue1> constructor1,
        Constructor<TValue1, TValue2> constructor2,
        Constructor<TValue2, TValue3> constructor3,
        Constructor<TValue3, TValue4> constructor4
    )
    {
        return Constructor<T, TValue4>.Of(
            constructor: value =>
            {
                var newValue3 = constructor4.Construct(value);
                var newValue2 = constructor3.Construct(newValue3);
                var newValue1 = constructor2.Construct(newValue2);
                var newValue0 = constructor1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Constructor<T, TValue5> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5>(
        Constructor<T, TValue1> constructor1,
        Constructor<TValue1, TValue2> constructor2,
        Constructor<TValue2, TValue3> constructor3,
        Constructor<TValue3, TValue4> constructor4,
        Constructor<TValue4, TValue5> constructor5
    )
    {
        return Constructor<T, TValue5>.Of(
            constructor: value =>
            {
                var newValue4 = constructor5.Construct(value);
                var newValue3 = constructor4.Construct(newValue4);
                var newValue2 = constructor3.Construct(newValue3);
                var newValue1 = constructor2.Construct(newValue2);
                var newValue0 = constructor1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Constructor<T, TValue6> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(
        Constructor<T, TValue1> constructor1,
        Constructor<TValue1, TValue2> constructor2,
        Constructor<TValue2, TValue3> constructor3,
        Constructor<TValue3, TValue4> constructor4,
        Constructor<TValue4, TValue5> constructor5,
        Constructor<TValue5, TValue6> constructor6
    )
    {
        return Constructor<T, TValue6>.Of(
            constructor: value =>
            {
                var newValue5 = constructor6.Construct(value);
                var newValue4 = constructor5.Construct(newValue5);
                var newValue3 = constructor4.Construct(newValue4);
                var newValue2 = constructor3.Construct(newValue3);
                var newValue1 = constructor2.Construct(newValue2);
                var newValue0 = constructor1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Constructor<T, TValue7> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(
        Constructor<T, TValue1> constructor1,
        Constructor<TValue1, TValue2> constructor2,
        Constructor<TValue2, TValue3> constructor3,
        Constructor<TValue3, TValue4> constructor4,
        Constructor<TValue4, TValue5> constructor5,
        Constructor<TValue5, TValue6> constructor6,
        Constructor<TValue6, TValue7> constructor7
    )
    {
        return Constructor<T, TValue7>.Of(
            constructor: value =>
            {
                var newValue6 = constructor7.Construct(value);
                var newValue5 = constructor6.Construct(newValue6);
                var newValue4 = constructor5.Construct(newValue5);
                var newValue3 = constructor4.Construct(newValue4);
                var newValue2 = constructor3.Construct(newValue3);
                var newValue1 = constructor2.Construct(newValue2);
                var newValue0 = constructor1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Constructor<T, TValue8> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(
        Constructor<T, TValue1> constructor1,
        Constructor<TValue1, TValue2> constructor2,
        Constructor<TValue2, TValue3> constructor3,
        Constructor<TValue3, TValue4> constructor4,
        Constructor<TValue4, TValue5> constructor5,
        Constructor<TValue5, TValue6> constructor6,
        Constructor<TValue6, TValue7> constructor7,
        Constructor<TValue7, TValue8> constructor8
    )
    {
        return Constructor<T, TValue8>.Of(
            constructor: value =>
            {
                var newValue7 = constructor8.Construct(value);
                var newValue6 = constructor7.Construct(newValue7);
                var newValue5 = constructor6.Construct(newValue6);
                var newValue4 = constructor5.Construct(newValue5);
                var newValue3 = constructor4.Construct(newValue4);
                var newValue2 = constructor3.Construct(newValue3);
                var newValue1 = constructor2.Construct(newValue2);
                var newValue0 = constructor1.Construct(newValue1);

                return newValue0;
            }
        );
    }

}
