// <auto-generated />
namespace Macaron.Optics;

partial class Iso
{
    public static Iso<T, TValue2> Compose<T, TValue1, TValue2>(
        Iso<T, TValue1> iso1,
        Iso<TValue1, TValue2> iso2
    )
    {
        return Iso<T, TValue2>.Of(
            getter: source =>
            {
                var value0 = source;
                var value1 = iso1.Get(value0);
                var value2 = iso2.Get(value1);

                return value2;
            },
            constructor: value =>
            {
                var newValue1 = iso2.Construct(value);
                var newValue0 = iso1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Iso<T, TValue3> Compose<T, TValue1, TValue2, TValue3>(
        Iso<T, TValue1> iso1,
        Iso<TValue1, TValue2> iso2,
        Iso<TValue2, TValue3> iso3
    )
    {
        return Iso<T, TValue3>.Of(
            getter: source =>
            {
                var value0 = source;
                var value1 = iso1.Get(value0);
                var value2 = iso2.Get(value1);
                var value3 = iso3.Get(value2);

                return value3;
            },
            constructor: value =>
            {
                var newValue2 = iso3.Construct(value);
                var newValue1 = iso2.Construct(newValue2);
                var newValue0 = iso1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Iso<T, TValue4> Compose<T, TValue1, TValue2, TValue3, TValue4>(
        Iso<T, TValue1> iso1,
        Iso<TValue1, TValue2> iso2,
        Iso<TValue2, TValue3> iso3,
        Iso<TValue3, TValue4> iso4
    )
    {
        return Iso<T, TValue4>.Of(
            getter: source =>
            {
                var value0 = source;
                var value1 = iso1.Get(value0);
                var value2 = iso2.Get(value1);
                var value3 = iso3.Get(value2);
                var value4 = iso4.Get(value3);

                return value4;
            },
            constructor: value =>
            {
                var newValue3 = iso4.Construct(value);
                var newValue2 = iso3.Construct(newValue3);
                var newValue1 = iso2.Construct(newValue2);
                var newValue0 = iso1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Iso<T, TValue5> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5>(
        Iso<T, TValue1> iso1,
        Iso<TValue1, TValue2> iso2,
        Iso<TValue2, TValue3> iso3,
        Iso<TValue3, TValue4> iso4,
        Iso<TValue4, TValue5> iso5
    )
    {
        return Iso<T, TValue5>.Of(
            getter: source =>
            {
                var value0 = source;
                var value1 = iso1.Get(value0);
                var value2 = iso2.Get(value1);
                var value3 = iso3.Get(value2);
                var value4 = iso4.Get(value3);
                var value5 = iso5.Get(value4);

                return value5;
            },
            constructor: value =>
            {
                var newValue4 = iso5.Construct(value);
                var newValue3 = iso4.Construct(newValue4);
                var newValue2 = iso3.Construct(newValue3);
                var newValue1 = iso2.Construct(newValue2);
                var newValue0 = iso1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Iso<T, TValue6> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(
        Iso<T, TValue1> iso1,
        Iso<TValue1, TValue2> iso2,
        Iso<TValue2, TValue3> iso3,
        Iso<TValue3, TValue4> iso4,
        Iso<TValue4, TValue5> iso5,
        Iso<TValue5, TValue6> iso6
    )
    {
        return Iso<T, TValue6>.Of(
            getter: source =>
            {
                var value0 = source;
                var value1 = iso1.Get(value0);
                var value2 = iso2.Get(value1);
                var value3 = iso3.Get(value2);
                var value4 = iso4.Get(value3);
                var value5 = iso5.Get(value4);
                var value6 = iso6.Get(value5);

                return value6;
            },
            constructor: value =>
            {
                var newValue5 = iso6.Construct(value);
                var newValue4 = iso5.Construct(newValue5);
                var newValue3 = iso4.Construct(newValue4);
                var newValue2 = iso3.Construct(newValue3);
                var newValue1 = iso2.Construct(newValue2);
                var newValue0 = iso1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Iso<T, TValue7> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(
        Iso<T, TValue1> iso1,
        Iso<TValue1, TValue2> iso2,
        Iso<TValue2, TValue3> iso3,
        Iso<TValue3, TValue4> iso4,
        Iso<TValue4, TValue5> iso5,
        Iso<TValue5, TValue6> iso6,
        Iso<TValue6, TValue7> iso7
    )
    {
        return Iso<T, TValue7>.Of(
            getter: source =>
            {
                var value0 = source;
                var value1 = iso1.Get(value0);
                var value2 = iso2.Get(value1);
                var value3 = iso3.Get(value2);
                var value4 = iso4.Get(value3);
                var value5 = iso5.Get(value4);
                var value6 = iso6.Get(value5);
                var value7 = iso7.Get(value6);

                return value7;
            },
            constructor: value =>
            {
                var newValue6 = iso7.Construct(value);
                var newValue5 = iso6.Construct(newValue6);
                var newValue4 = iso5.Construct(newValue5);
                var newValue3 = iso4.Construct(newValue4);
                var newValue2 = iso3.Construct(newValue3);
                var newValue1 = iso2.Construct(newValue2);
                var newValue0 = iso1.Construct(newValue1);

                return newValue0;
            }
        );
    }

    public static Iso<T, TValue8> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(
        Iso<T, TValue1> iso1,
        Iso<TValue1, TValue2> iso2,
        Iso<TValue2, TValue3> iso3,
        Iso<TValue3, TValue4> iso4,
        Iso<TValue4, TValue5> iso5,
        Iso<TValue5, TValue6> iso6,
        Iso<TValue6, TValue7> iso7,
        Iso<TValue7, TValue8> iso8
    )
    {
        return Iso<T, TValue8>.Of(
            getter: source =>
            {
                var value0 = source;
                var value1 = iso1.Get(value0);
                var value2 = iso2.Get(value1);
                var value3 = iso3.Get(value2);
                var value4 = iso4.Get(value3);
                var value5 = iso5.Get(value4);
                var value6 = iso6.Get(value5);
                var value7 = iso7.Get(value6);
                var value8 = iso8.Get(value7);

                return value8;
            },
            constructor: value =>
            {
                var newValue7 = iso8.Construct(value);
                var newValue6 = iso7.Construct(newValue7);
                var newValue5 = iso6.Construct(newValue6);
                var newValue4 = iso5.Construct(newValue5);
                var newValue3 = iso4.Construct(newValue4);
                var newValue2 = iso3.Construct(newValue3);
                var newValue1 = iso2.Construct(newValue2);
                var newValue0 = iso1.Construct(newValue1);

                return newValue0;
            }
        );
    }

}
