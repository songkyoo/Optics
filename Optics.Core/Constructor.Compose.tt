<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Optics;

partial class Constructor
{
<# for (int n = 2; n <= MaxCount; n++) { #>
    public static Constructor<T, TValue<#= n #>> Compose<T, <# for (int i = 1; i < n; i++) { #>TValue<#= i #>, <# } #>TValue<#= n #>>(
        Constructor<T, TValue1> constructor1,
<# for (int i = 1; i < n - 1; i++) { #>
        Constructor<TValue<#= i #>, TValue<#= i + 1 #>> constructor<#= i + 1 #>,
<# } #>
        Constructor<TValue<#= n - 1 #>, TValue<#= n #>> constructor<#= n #>
    )
    {
        return Constructor<T, TValue<#= n #>>.Of(
            constructor: value =>
            {
                var newValue<#= n - 1 #> = constructor<#= n #>.Construct(value);
<# for (int i = n - 2; i >= 0; i--) { #>
                var newValue<#= i #> = constructor<#= i + 1 #>.Construct(newValue<#= i + 1 #>);
<# } #>

                return newValue0;
            }
        );
    }

<# } #>
}
