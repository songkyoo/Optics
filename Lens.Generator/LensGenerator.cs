using System.Collections.Immutable;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Macaron.Optics.Generator;

[Generator]
public class LensGenerator : IIncrementalGenerator
{
    #region Static
    private static string? ToFullyQualifiedName(ISymbol? symbol)
    {
        return symbol?.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
    }

    private static INamedTypeSymbol? GetLensOfType(GeneratorSyntaxContext generatorSyntaxContext)
    {
        var genericNameSyntax = GetGenericNameFromInvocation((InvocationExpressionSyntax)generatorSyntaxContext.Node);
        if (genericNameSyntax is null)
        {
            return null;
        }

        var symbol = generatorSyntaxContext.SemanticModel.GetSymbolInfo(genericNameSyntax).Symbol as IMethodSymbol;
        if (symbol?.IsStatic is not true ||
            ToFullyQualifiedName(symbol.ContainingType) != "global::Macaron.Optics.Lens"
        )
        {
            return null;
        }

        var namedTypeSymbol = generatorSyntaxContext
            .SemanticModel
            .GetTypeInfo(genericNameSyntax.TypeArgumentList.Arguments[0])
            .Type as INamedTypeSymbol;
        return namedTypeSymbol?.IsRecord is true || namedTypeSymbol?.TypeKind == TypeKind.Struct
            ? namedTypeSymbol
            : null;
    }

    private static GenericNameSyntax? GetGenericNameFromInvocation(InvocationExpressionSyntax invocationExpressionSyntax)
    {
        return invocationExpressionSyntax.Expression switch
        {
            MemberAccessExpressionSyntax { Name: GenericNameSyntax genericName } => genericName,
            GenericNameSyntax genericName => genericName,
            _ => null
        };
    }

    private static bool IsValidProperty(IPropertySymbol propertySymbol)
    {
        if (propertySymbol.NullableAnnotation == NullableAnnotation.Annotated ||
            propertySymbol.GetMethod is null ||
            propertySymbol.IsIndexer
        )
        {
            return false;
        }

        return propertySymbol.SetMethod is not null or { IsReadOnly: true };
    }

    private static bool IsValidField(IFieldSymbol fieldSymbol)
    {
        return  !fieldSymbol.IsConst &&
            !fieldSymbol.IsStatic &&
            !fieldSymbol.IsReadOnly &&
            fieldSymbol.NullableAnnotation != NullableAnnotation.Annotated;
    }

    private static void GenerateSource(
        SourceProductionContext sourceProductionContext,
        ImmutableArray<INamedTypeSymbol> lensTypeSymbols
    )
    {
        var uniqueTypeSymbols = lensTypeSymbols.Distinct<INamedTypeSymbol>(SymbolEqualityComparer.Default).ToArray();
        if (uniqueTypeSymbols.Length == 0)
        {
            return;
        }

        foreach (var typeSymbol in uniqueTypeSymbols)
        {
            var stringBuilder = new StringBuilder();

            var typeName = ToFullyQualifiedName(typeSymbol)!;
            var className = GetClassName(typeName);

            stringBuilder.AppendLine("// <auto-generated />");
            stringBuilder.AppendLine("#nullable enable");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine($"namespace Macaron.Optics");
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine($"    public static class {className}");
            stringBuilder.AppendLine("    {");

            var members = typeSymbol
                .GetMembers()
                .Where(symbol => symbol.DeclaredAccessibility == Accessibility.Public)
                .Where(symbol =>
                    (symbol is IPropertySymbol propertySymbol && IsValidProperty(propertySymbol)) ||
                    (symbol is IFieldSymbol fieldSymbol && IsValidField(fieldSymbol))
                )
                .ToArray();
            foreach (var member in members)
            {
                var memberTypeName = ToFullyQualifiedName(member is IPropertySymbol propertySymbol
                    ? propertySymbol.Type
                    : ((IFieldSymbol)member).Type
                );

                stringBuilder.AppendLine($"        public static global::Macaron.Optics.Lens<{typeName}, {memberTypeName}> {member.Name}(");
                stringBuilder.AppendLine($"            this global::Macaron.Optics.LensOf<{typeName}> lensOf");
                stringBuilder.AppendLine("        )");
                stringBuilder.AppendLine("        {");
                stringBuilder.AppendLine($"            return global::Macaron.Optics.Lens<{typeName}, {memberTypeName}>.Of(");
                stringBuilder.AppendLine($"                getter: static source => source.{member.Name},");
                stringBuilder.AppendLine($"                setter: static (source, value) => source with");
                stringBuilder.AppendLine("                {");
                stringBuilder.AppendLine($"                    {member.Name} = value,");
                stringBuilder.AppendLine("                }");
                stringBuilder.AppendLine("            );");
                stringBuilder.AppendLine("        }");
            }

            stringBuilder.AppendLine("    }");
            stringBuilder.AppendLine("}");

            sourceProductionContext.AddSource(
                hintName: $"{className}.g.cs",
                sourceText: SourceText.From(stringBuilder.ToString(), Encoding.UTF8)
            );

            #region Local Functions
            static string GetClassName(string typeName)
            {
                var normalizedTypeName = Regex.Replace(Regex.Replace(typeName, "[ :.<,>?]", "_"), "_{2,}", "_");
                var className = $"global_Macaron_Optics_LensOf_{(normalizedTypeName.Last() is '_' ? normalizedTypeName[..^1] : normalizedTypeName)}_Extensions";

                return className;
            }
            #endregion
        }
    }
    #endregion

    #region IIncrementalGenerator Interface
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var lensOfCalls = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (syntaxNode, _) => syntaxNode is InvocationExpressionSyntax,
                transform: static (generatorSyntaxContext, _) => GetLensOfType(generatorSyntaxContext)
            )
            .Where(static typeName => typeName is not null)
            .Select(static (typeName, _) => typeName!)
            .Collect();

        context.RegisterSourceOutput(
            source: lensOfCalls,
            action: GenerateSource
        );
    }
    #endregion
}
