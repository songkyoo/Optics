using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

using static Macaron.Optics.Generator.Helpers;

namespace Macaron.Optics.Generator;

[Generator]
public class LensOfGenerator : IIncrementalGenerator
{
    #region Constants
    private const string LensOfAttributeSource =
        """
        // <auto-generated />
        #nullable enable

        using System;
        using System.Diagnostics;

        namespace Macaron.Optics
        {
            [Conditional("SOURCE_GENERATOR_ONLY")]
            [AttributeUsage(AttributeTargets.Class, Inherited = false)]
            internal class LensOfAttribute : Attribute
            {
                public Type? TargetType { get; }

                public LensOfAttribute(Type? targetType = null)
                {
                    TargetType = targetType;
                }
            }
        }

        """;

    private const string LensOfAttributeName = "global::Macaron.Optics.LensOfAttribute";
    #endregion

    #region IIncrementalGenerator Interface
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx =>
        {
            ctx.AddSource("LensOfAttribute.g.cs", SourceText.From(LensOfAttributeSource, Encoding.UTF8));
        });

        var visitedTypes = new HashSet<INamedTypeSymbol>(SymbolEqualityComparer.Default);
        IncrementalValuesProvider<LensOfAttributeContext> valuesProvider = context
            .SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (syntaxNode, _) => syntaxNode is ClassDeclarationSyntax,
                transform: (generatorSyntaxContext, _) => GetClassWithLensOfAttribute(
                    generatorSyntaxContext,
                    LensOfAttributeName,
                    visitedTypes
                )
            );

        context.RegisterSourceOutput(
            source: valuesProvider,
            action: (sourceProductionContext, lensOfAttributeContext) => AddSource(
                sourceProductionContext: sourceProductionContext,
                lensOfAttributeContext: lensOfAttributeContext,
                generateLensOfMembers: GenerateLensOfMembers
            )
        );
    }
    #endregion
}
