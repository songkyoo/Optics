using System.Collections.Immutable;
using System.Reflection;
using Macaron.Optics.Generator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Macaron.Optics.Tests;

[TestFixture]
public class LensOfGeneratorTests
{
    private static void AssertGeneratedCode(string sourceCode, params string[] expected)
    {
        var (_, generatedCodes) = CompileAndGetResults<LensOfGenerator>(
            sourceCode,
            skipGeneratedCodeCount: 2, // 0, 1번은 LensOfAttribute.g.cs, OptionalOfAttribute.g.cs
            additionalAssemblies: [typeof(LensOf<>).Assembly]
        );

        Assert.That(generatedCodes, Has.Length.EqualTo(expected.Length));

        for (int i = 0; i < generatedCodes.Length; i++)
        {
            var generatedCode = generatedCodes[i];
            Assert.That(generatedCode.ReplaceLineEndings(), Is.EqualTo(expected[i].ReplaceLineEndings()));
        }
    }

    private static void AssertDiagnostic(string sourceCode, string expectedDiagnosticId)
    {
        var (diagnostics, _) = CompileAndGetResults<LensOfGenerator>(
            sourceCode,
            skipGeneratedCodeCount: 2,
            additionalAssemblies: [typeof(LensOf<>).Assembly]
        );

        var actualDiagnosticIds = diagnostics
            .Where(diagnostic => diagnostic.Severity == DiagnosticSeverity.Error)
            .Select(diagnostic => diagnostic.Id)
            .ToArray();

        Assert.That(actualDiagnosticIds, Has.Some.Matches(expectedDiagnosticId));
    }

    private static (ImmutableArray<Diagnostic> Diagnostics, ImmutableArray<string> GeneratedCodes) CompileAndGetResults<T>(
        string sourceCode,
        int skipGeneratedCodeCount,
        Assembly[]? additionalAssemblies = null
    ) where T : IIncrementalGenerator, new()
    {
        var references = AppDomain
            .CurrentDomain
            .GetAssemblies()
            .Concat(additionalAssemblies ?? [])
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .ToImmutableArray();

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.InterfaceDelegation.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        var generator = new T();
        var driver = CSharpGeneratorDriver.Create(generator);

        var result = driver.RunGenerators(compilation).GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;
        var generatedCodes = generatedSources.Length > skipGeneratedCodeCount
            ? generatedSources.Skip(skipGeneratedCodeCount).Select(source => source.SourceText.ToString()).ToImmutableArray()
            : ImmutableArray<string>.Empty;

        var allDiagnostics = compilation.GetDiagnostics()
            .Concat(result.Diagnostics)
            .ToImmutableArray();

        return (allDiagnostics, generatedCodes);
    }

    [Test]
    public void When_LensOfAttributeWithoutTypeArgument_Should_UseContainingType()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Person(string Name, int Age)
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }

            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record Person
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String>.Of(
                            getter: static source => source.Name,
                            setter: static (source, value) => source with
                            {
                                Name = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.Int32> Age = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.Int32>.Of(
                            getter: static source => source.Age,
                            setter: static (source, value) => source with
                            {
                                Age = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }
    [Test]
    public void When_LensOfAttributeWithTypeArgument_Should_UseSpecifiedType()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Person(string Name, int Age);

            [LensOf(typeof(Person))]
            public static partial class PersonLens
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial class PersonLens
                {
                    public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String>.Of(
                        getter: static source => source.Name,
                        setter: static (source, value) => source with
                        {
                            Name = value,
                        }
                    );

                    public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.Int32> Age = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.Int32>.Of(
                        getter: static source => source.Age,
                        setter: static (source, value) => source with
                        {
                            Age = value,
                        }
                    );
                }
            }

            """
        );
    }

    [Test]
    public void When_OptionalOfAttribute_Should_GenerateOptionalLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using Macaron.Functional;

            namespace Macaron.Optics.Tests;

            public partial record Person(string Name, int Age);

            [OptionalOf(typeof(Person))]
            public static partial class PersonOptional
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial class PersonOptional
                {
                    public static readonly global::Macaron.Optics.Optional<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::System.String> Name = global::Macaron.Optics.Optional<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::System.String>.Of(
                        optionalGetter: static source => source.IsJust
                            ? global::Macaron.Functional.Maybe.Just(source.Value.Name)
                            : global::Macaron.Functional.Maybe.Nothing<global::System.String>(),
                        setter: static (source, value) => source.IsJust
                            ? global::Macaron.Functional.Maybe.Just(source.Value with
                            {
                                Name = value,
                            })
                            : global::Macaron.Functional.Maybe.Nothing<global::Macaron.Optics.Tests.Person>()
                    );

                    public static readonly global::Macaron.Optics.Optional<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::System.Int32> Age = global::Macaron.Optics.Optional<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::System.Int32>.Of(
                        optionalGetter: static source => source.IsJust
                            ? global::Macaron.Functional.Maybe.Just(source.Value.Age)
                            : global::Macaron.Functional.Maybe.Nothing<global::System.Int32>(),
                        setter: static (source, value) => source.IsJust
                            ? global::Macaron.Functional.Maybe.Just(source.Value with
                            {
                                Age = value,
                            })
                            : global::Macaron.Functional.Maybe.Nothing<global::Macaron.Optics.Tests.Person>()
                    );
                }
            }

            """
        );
    }

    [Test]
    public void When_RecordWithNullableProperties_Should_GenerateMaybeLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Person(string Name, string? Email, int? Age)
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record Person
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String>.Of(
                            getter: static source => source.Name,
                            setter: static (source, value) => source with
                            {
                                Name = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::Macaron.Functional.Maybe<global::System.String>> Email = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::Macaron.Functional.Maybe<global::System.String>>.Of(
                            getter: static source => source is { Email: { } value }
                                ? global::Macaron.Functional.Maybe.Just(value)
                                : global::Macaron.Functional.Maybe.Nothing<global::System.String>(),
                            setter: static (source, value) => source with
                            {
                                Email = value is { IsJust: true, Value: var value2 } ? value2 : null,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::Macaron.Functional.Maybe<global::System.Int32>> Age = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::Macaron.Functional.Maybe<global::System.Int32>>.Of(
                            getter: static source => source is { Age: { } value }
                                ? global::Macaron.Functional.Maybe.Just(value)
                                : global::Macaron.Functional.Maybe.Nothing<global::System.Int32>(),
                            setter: static (source, value) => source with
                            {
                                Age = value is { IsJust: true, Value: var value2 } ? value2 : null,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_StructWithProperties_Should_GenerateLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial struct Point
            {
                public int X { get; set; }
                public int Y { get; set; }

                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial struct Point
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Point, global::System.Int32> X = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Point, global::System.Int32>.Of(
                            getter: static source => source.X,
                            setter: static (source, value) => source with
                            {
                                X = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Point, global::System.Int32> Y = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Point, global::System.Int32>.Of(
                            getter: static source => source.Y,
                            setter: static (source, value) => source with
                            {
                                Y = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_NestedClasses_Should_GenerateWithCorrectIndentation()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial class Outer
            {
                public partial class Inner
                {
                    public partial record Person(string Name)
                    {
                        [LensOf]
                        public static partial class Lens
                        {
                        }
                    }
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial class Outer
                {
                    partial class Inner
                    {
                        partial record Person
                        {
                            partial class Lens
                            {
                                public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Outer.Inner.Person, global::System.String> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Outer.Inner.Person, global::System.String>.Of(
                                    getter: static source => source.Name,
                                    setter: static (source, value) => source with
                                    {
                                        Name = value,
                                    }
                                );
                            }
                        }
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_NoPublicProperties_Should_GenerateNothing()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Empty
            {
                private int value;

                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected: []
        );
    }

    [Test]
    public void When_InheritedProperties_Should_GenerateLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Animal(string Name);
            public partial record Dog(string Name, string Breed) : Animal(Name)
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record Dog
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Dog, global::System.String> Breed = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Dog, global::System.String>.Of(
                            getter: static source => source.Breed,
                            setter: static (source, value) => source with
                            {
                                Breed = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Dog, global::System.String> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Dog, global::System.String>.Of(
                            getter: static source => source.Name,
                            setter: static (source, value) => source with
                            {
                                Name = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_MixedProperties_Should_OnlyGenerateForValidOnes()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial struct TestClass
            {
                public string ValidProperty { get; set; }
                public string ReadOnlyProperty { get; }
                public string InitOnlyProperty { get; init; }
                public string this[int index] => ""; // Indexer
                private string PrivateProperty { get; set; }
                public static string StaticProperty { get; set; }
                public const string ConstField = "const";
                public readonly string ReadOnlyField = "readonly";
                public string PublicField;

                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial struct TestClass
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.TestClass, global::System.String> ValidProperty = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.TestClass, global::System.String>.Of(
                            getter: static source => source.ValidProperty,
                            setter: static (source, value) => source with
                            {
                                ValidProperty = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.TestClass, global::System.String> InitOnlyProperty = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.TestClass, global::System.String>.Of(
                            getter: static source => source.InitOnlyProperty,
                            setter: static (source, value) => source with
                            {
                                InitOnlyProperty = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.TestClass, global::System.String> PublicField = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.TestClass, global::System.String>.Of(
                            getter: static source => source.PublicField,
                            setter: static (source, value) => source with
                            {
                                PublicField = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_AttributeOnNonStaticClass_Should_ReportError()
    {
        AssertDiagnostic(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Person(string Name);

            [LensOf(typeof(Person))]
            public partial class PersonLens
            {
            }
            """,
            expectedDiagnosticId: "MAOG0003"
        );
    }

    [Test]
    public void When_AttributeTargetIsInterface_Should_ReportError()
    {
        AssertDiagnostic(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public interface IPerson
            {
                string Name { get; }
            }

            [LensOf(typeof(IPerson))]
            public static partial class PersonLens
            {
            }
            """,
            expectedDiagnosticId: "MAOG0004"
        );
    }

    [Test]
    public void When_AttributeTargetIsNormalClass_Should_ReportError()
    {
        AssertDiagnostic(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public class Person
            {
                public string Name { get; set; }
            }

            [LensOf(typeof(Person))]
            public static partial class PersonLens
            {
            }
            """,
            expectedDiagnosticId: "MAOG0004"
        );
    }

    [Test]
    public void When_GlobalNamespace_Should_GenerateWithoutNamespaceBlock()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using Macaron.Optics;

            public partial record Person(string Name)
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            partial record Person
            {
                partial class Lens
                {
                    public static readonly global::Macaron.Optics.Lens<global::Person, global::System.String> Name = global::Macaron.Optics.Lens<global::Person, global::System.String>.Of(
                        getter: static source => source.Name,
                        setter: static (source, value) => source with
                        {
                            Name = value,
                        }
                    );
                }
            }

            """
        );
    }

    [Test]
    public void When_OptionalOfWithNullableProperties_Should_GenerateMaybeLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using Macaron.Functional;

            namespace Macaron.Optics.Tests;

            public partial record Person(string Name, string? Email, int? Age);

            [OptionalOf(typeof(Person))]
            public static partial class PersonOptional
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial class PersonOptional
                {
                    public static readonly global::Macaron.Optics.Optional<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::System.String> Name = global::Macaron.Optics.Optional<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::System.String>.Of(
                        optionalGetter: static source => source.IsJust
                            ? global::Macaron.Functional.Maybe.Just(source.Value.Name)
                            : global::Macaron.Functional.Maybe.Nothing<global::System.String>(),
                        setter: static (source, value) => source.IsJust
                            ? global::Macaron.Functional.Maybe.Just(source.Value with
                            {
                                Name = value,
                            })
                            : global::Macaron.Functional.Maybe.Nothing<global::Macaron.Optics.Tests.Person>()
                    );

                    public static readonly global::Macaron.Optics.Lens<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::Macaron.Functional.Maybe<global::System.String>> Email = global::Macaron.Optics.Lens<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::Macaron.Functional.Maybe<global::System.String>>.Of(
                        getter: static source => source is { IsJust: true, Value: { } value }
                            ? value.Email is { } value2
                                ? global::Macaron.Functional.Maybe.Just(value2)
                                : global::Macaron.Functional.Maybe.Nothing<global::System.String>()
                            : global::Macaron.Functional.Maybe.Nothing<global::System.String>(),
                        setter: static (source, value) => source.IsJust
                            ? global::Macaron.Functional.Maybe.Just(source.Value with
                            {
                                Email = value is { IsJust: true, Value: var value2 } ? value2 : null,
                            })
                            : global::Macaron.Functional.Maybe.Nothing<global::Macaron.Optics.Tests.Person>()
                    );

                    public static readonly global::Macaron.Optics.Lens<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::Macaron.Functional.Maybe<global::System.Int32>> Age = global::Macaron.Optics.Lens<global::Macaron.Functional.Maybe<global::Macaron.Optics.Tests.Person>, global::Macaron.Functional.Maybe<global::System.Int32>>.Of(
                        getter: static source => source is { IsJust: true, Value: { } value }
                            ? value.Age is { } value2
                                ? global::Macaron.Functional.Maybe.Just(value2)
                                : global::Macaron.Functional.Maybe.Nothing<global::System.Int32>()
                            : global::Macaron.Functional.Maybe.Nothing<global::System.Int32>(),
                        setter: static (source, value) => source.IsJust
                            ? global::Macaron.Functional.Maybe.Just(source.Value with
                            {
                                Age = value is { IsJust: true, Value: var value2 } ? value2 : null,
                            })
                            : global::Macaron.Functional.Maybe.Nothing<global::Macaron.Optics.Tests.Person>()
                    );
                }
            }

            """
        );
    }

    [Test]
    public void When_EmptyRecord_Should_GenerateNothing()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Empty
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected: []
        );
    }

    [Test]
    public void When_RecordWithComplexTypes_Should_GenerateLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using System.Collections.Generic;

            namespace Macaron.Optics.Tests;

            public partial record ComplexRecord(
                List<string> Items,
                Dictionary<int, string> Map,
                (int X, int Y) Coordinates
            )
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record ComplexRecord
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ComplexRecord, global::System.Collections.Generic.List<global::System.String>> Items = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ComplexRecord, global::System.Collections.Generic.List<global::System.String>>.Of(
                            getter: static source => source.Items,
                            setter: static (source, value) => source with
                            {
                                Items = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ComplexRecord, global::System.Collections.Generic.Dictionary<global::System.Int32, global::System.String>> Map = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ComplexRecord, global::System.Collections.Generic.Dictionary<global::System.Int32, global::System.String>>.Of(
                            getter: static source => source.Map,
                            setter: static (source, value) => source with
                            {
                                Map = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ComplexRecord, (global::System.Int32 X, global::System.Int32 Y)> Coordinates = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ComplexRecord, (global::System.Int32 X, global::System.Int32 Y)>.Of(
                            getter: static source => source.Coordinates,
                            setter: static (source, value) => source with
                            {
                                Coordinates = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_GenericRecord_Should_GenerateLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Container<T>(T Value, string Label)
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record Container<T>
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Container<T>, T> Value = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Container<T>, T>.Of(
                            getter: static source => source.Value,
                            setter: static (source, value) => source with
                            {
                                Value = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Container<T>, global::System.String> Label = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Container<T>, global::System.String>.Of(
                            getter: static source => source.Label,
                            setter: static (source, value) => source with
                            {
                                Label = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_RecordWithConstrainedGeneric_Should_GenerateLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using System;

            namespace Macaron.Optics.Tests;

            public partial record Repository<T>(T Entity, DateTime CreatedAt) where T : class
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record Repository<T>
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Repository<T>, T> Entity = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Repository<T>, T>.Of(
                            getter: static source => source.Entity,
                            setter: static (source, value) => source with
                            {
                                Entity = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Repository<T>, global::System.DateTime> CreatedAt = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Repository<T>, global::System.DateTime>.Of(
                            getter: static source => source.CreatedAt,
                            setter: static (source, value) => source with
                            {
                                CreatedAt = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_NestedGenericTypes_Should_GenerateLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using System.Collections.Generic;

            namespace Macaron.Optics.Tests;

            public partial record NestedGeneric<T>(
                List<Dictionary<string?, T>> Data,
                T? OptionalValue
            ) where T : struct
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record NestedGeneric<T>
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.NestedGeneric<T>, global::System.Collections.Generic.List<global::System.Collections.Generic.Dictionary<global::System.String?, T>>> Data = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.NestedGeneric<T>, global::System.Collections.Generic.List<global::System.Collections.Generic.Dictionary<global::System.String?, T>>>.Of(
                            getter: static source => source.Data,
                            setter: static (source, value) => source with
                            {
                                Data = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.NestedGeneric<T>, global::Macaron.Functional.Maybe<T>> OptionalValue = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.NestedGeneric<T>, global::Macaron.Functional.Maybe<T>>.Of(
                            getter: static source => source is { OptionalValue: { } value }
                                ? global::Macaron.Functional.Maybe.Just(value)
                                : global::Macaron.Functional.Maybe.Nothing<T>(),
                            setter: static (source, value) => source with
                            {
                                OptionalValue = value is { IsJust: true, Value: var value2 } ? value2 : null,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_RecordWithArrays_Should_GenerateLenses()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record ArrayRecord(
                int[] Numbers,
                int?[,][] OptionalIntegers,
                string?[,][] OptionalStrings,
                byte[][] Matrix
            )
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record ArrayRecord
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ArrayRecord, global::System.Int32[]> Numbers = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ArrayRecord, global::System.Int32[]>.Of(
                            getter: static source => source.Numbers,
                            setter: static (source, value) => source with
                            {
                                Numbers = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ArrayRecord, global::System.Int32?[,][]> OptionalIntegers = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ArrayRecord, global::System.Int32?[,][]>.Of(
                            getter: static source => source.OptionalIntegers,
                            setter: static (source, value) => source with
                            {
                                OptionalIntegers = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ArrayRecord, global::System.String?[,][]> OptionalStrings = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ArrayRecord, global::System.String?[,][]>.Of(
                            getter: static source => source.OptionalStrings,
                            setter: static (source, value) => source with
                            {
                                OptionalStrings = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ArrayRecord, global::System.Byte[][]> Matrix = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.ArrayRecord, global::System.Byte[][]>.Of(
                            getter: static source => source.Matrix,
                            setter: static (source, value) => source with
                            {
                                Matrix = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_RecordWithKeywords_Should_EscapeCorrectly()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record KeywordRecord(
                string @class,
                int @namespace,
                bool @using
            )
            {
                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record KeywordRecord
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.KeywordRecord, global::System.String> @class = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.KeywordRecord, global::System.String>.Of(
                            getter: static source => source.@class,
                            setter: static (source, value) => source with
                            {
                                @class = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.KeywordRecord, global::System.Int32> @namespace = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.KeywordRecord, global::System.Int32>.Of(
                            getter: static source => source.@namespace,
                            setter: static (source, value) => source with
                            {
                                @namespace = value,
                            }
                        );

                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.KeywordRecord, global::System.Boolean> @using = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.KeywordRecord, global::System.Boolean>.Of(
                            getter: static source => source.@using,
                            setter: static (source, value) => source with
                            {
                                @using = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_AttributeTargetIsEnum_Should_ReportError()
    {
        AssertDiagnostic(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public enum Color
            {
                Red, Green, Blue
            }

            [LensOf(typeof(Color))]
            public static partial class ColorLens
            {
            }
            """,
            expectedDiagnosticId: "MAOG0004"
        );
    }

    [Test]
    public void When_AttributeTargetIsDelegate_Should_ReportError()
    {
        AssertDiagnostic(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public delegate void MyDelegate(string value);

            [LensOf(typeof(MyDelegate))]
            public static partial class DelegateLens
            {
            }
            """,
            expectedDiagnosticId: "MAOG0004"
        );
    }

    [Test]
    public void When_RecordWithStaticMembers_Should_IgnoreStaticMembers()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record StaticMemberRecord(string Name)
            {
                public static string StaticProperty { get; set; } = "";
                public static readonly string StaticField = "";

                [LensOf]
                public static partial class Lens
                {
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.Optics.Tests
            {
                partial record StaticMemberRecord
                {
                    partial class Lens
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.StaticMemberRecord, global::System.String> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.StaticMemberRecord, global::System.String>.Of(
                            getter: static source => source.Name,
                            setter: static (source, value) => source with
                            {
                                Name = value,
                            }
                        );
                    }
                }
            }

            """
        );
    }

    [Test]
    public void When_SameAttributeUsedInMultipleClasses_ShouldGenerateLensPerClass()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.Optics.Tests;

            public partial record Person(string Name);

            [LensOf(typeof(Person))]
            public static partial class PersonLens1
            {
            }

            [LensOf(typeof(Person))]
            public static partial class PersonLens2
            {
            }
            """,
            expected:
            [
                """
                // <auto-generated />
                #nullable enable

                namespace Macaron.Optics.Tests
                {
                    partial class PersonLens1
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String>.Of(
                            getter: static source => source.Name,
                            setter: static (source, value) => source with
                            {
                                Name = value,
                            }
                        );
                    }
                }

                """,
                """
                // <auto-generated />
                #nullable enable

                namespace Macaron.Optics.Tests
                {
                    partial class PersonLens2
                    {
                        public static readonly global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String> Name = global::Macaron.Optics.Lens<global::Macaron.Optics.Tests.Person, global::System.String>.Of(
                            getter: static source => source.Name,
                            setter: static (source, value) => source with
                            {
                                Name = value,
                            }
                        );
                    }
                }

                """
            ]
        );
    }
}
