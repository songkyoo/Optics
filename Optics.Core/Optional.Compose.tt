<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
using Macaron.Functional;

using static Macaron.Functional.Maybe;

namespace Macaron.Optics;

public static partial class Lens
{
<# for (int n = 2; n <= MaxCount; n++) { #>
    public static Optional<T, TValue<#= n #>> Compose<T, <# for (int i = 1; i < n; i++) { #>TValue<#= i #>, <# } #>TValue<#= n #>>(
        Optional<T, TValue1> optional1,
<# for (int i = 1; i < n - 1; i++) { #>
        Optional<TValue<#= i #>, TValue<#= i + 1 #>> optional<#= i + 1 #>,
<# } #>
        Optional<TValue<#= n - 1 #>, TValue<#= n #>> optional<#= n #>
    )
    {
        return Optional<T, TValue<#= n #>>.Of(
            getter: source =>
            {
                var value0 = Just(source);

<# for (int i = 0; i < n; i++) { #>
                var value<#= i + 1 #> = optional<#= i + 1 #>.Get(value<#= i #>.Value);
                if (value<#= i + 1 #>.IsNothing)
                {
                    return Nothing<TValue<#= n #>>();
                }

<# } #>
                return value<#= n #>;
            },
            setter: (source, value) =>
            {
                var value0 = Just(source);

<# for (int i = 0; i < n - 1; i++) { #>
                var value<#= i + 1 #> = optional<#= i + 1 #>.Get(value<#= i #>.Value);
                if (value<#= i + 1 #>.IsNothing)
                {
                    return source;
                }

<# } #>
                var newValue<#= n - 1 #> = optional<#= n #>.Set(value<#= n - 1 #>.Value, value);
<# for (int i = n - 1; i > 0; i--) { #>
                var newValue<#= i - 1 #> = optional<#= i #>.Set(value<#= i - 1 #>.Value, newValue<#= i #>);
<# } #>

                return newValue0;
            }
        );
    }

    public static Optional<Maybe<T>, TValue<#= n #>> Compose<T, <# for (int i = 1; i < n; i++) { #>TValue<#= i #>, <# } #>TValue<#= n #>>(
        Optional<Maybe<T>, TValue1> optional1,
<# for (int i = 1; i < n - 1; i++) { #>
        Optional<Maybe<TValue<#= i #>>, TValue<#= i + 1 #>> optional<#= i + 1 #>,
<# } #>
        Optional<Maybe<TValue<#= n - 1 #>>, TValue<#= n #>> optional<#= n #>
    )
    {
        return Optional<Maybe<T>, TValue<#= n #>>.Of(
            getter: source =>
            {
                var value0 = source;

<# for (int i = 0; i < n; i++) { #>
                var value<#= i + 1 #> = optional<#= i + 1 #>.Get(value<#= i #>);
                if (value<#= i + 1 #>.IsNothing)
                {
                    return Nothing<TValue<#= n #>>();
                }

<# } #>
                return value<#= n #>;
            },
            setter: (source, value) =>
            {
                var value0 = source;

<# for (int i = 0; i < n - 1; i++) { #>
                var value<#= i + 1 #> = optional<#= i + 1 #>.Get(value<#= i #>);
                if (value<#= i + 1 #>.IsNothing)
                {
                    return source;
                }

<# } #>
                var newValue<#= n - 1 #> = optional<#= n #>.Set(value<#= n - 1 #>, value);
<# for (int i = n - 1; i > 0; i--) { #>
                var newValue<#= i - 1 #> = optional<#= i #>.Set(value<#= i - 1 #>, newValue<#= i #>.Value);
<# } #>

                return newValue0;
            }
        );
    }
<# if (n < MaxCount) { #>

<# } #>
<# } #>
}
