// <auto-generated />
using Macaron.Functional;

using static Macaron.Functional.Maybe;

namespace Macaron.Optics;

public static partial class Lens
{
    public static Optional<T, TValue2> Compose<T, TValue1, TValue2>(
        Optional<T, TValue1> optional1,
        Optional<TValue1, TValue2> optional2
    )
    {
        return Optional<T, TValue2>.Of(
            getter: source =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return Nothing<TValue2>();
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return Nothing<TValue2>();
                }

                return value2;
            },
            setter: (source, value) =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return source;
                }

                var newValue1 = optional2.Set(value1.Value, value);
                var newValue0 = optional1.Set(value0.Value, newValue1);

                return newValue0;
            }
        );
    }

    public static Optional<Maybe<T>, TValue2> Compose<T, TValue1, TValue2>(
        Optional<Maybe<T>, TValue1> optional1,
        Optional<Maybe<TValue1>, TValue2> optional2
    )
    {
        return Optional<Maybe<T>, TValue2>.Of(
            getter: source =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return Nothing<TValue2>();
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return Nothing<TValue2>();
                }

                return value2;
            },
            setter: (source, value) =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return source;
                }

                var newValue1 = optional2.Set(value1, value);
                var newValue0 = optional1.Set(value0, newValue1.Value);

                return newValue0;
            }
        );
    }

    public static Optional<T, TValue3> Compose<T, TValue1, TValue2, TValue3>(
        Optional<T, TValue1> optional1,
        Optional<TValue1, TValue2> optional2,
        Optional<TValue2, TValue3> optional3
    )
    {
        return Optional<T, TValue3>.Of(
            getter: source =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return Nothing<TValue3>();
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return Nothing<TValue3>();
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return Nothing<TValue3>();
                }

                return value3;
            },
            setter: (source, value) =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return source;
                }

                var newValue2 = optional3.Set(value2.Value, value);
                var newValue1 = optional2.Set(value1.Value, newValue2);
                var newValue0 = optional1.Set(value0.Value, newValue1);

                return newValue0;
            }
        );
    }

    public static Optional<Maybe<T>, TValue3> Compose<T, TValue1, TValue2, TValue3>(
        Optional<Maybe<T>, TValue1> optional1,
        Optional<Maybe<TValue1>, TValue2> optional2,
        Optional<Maybe<TValue2>, TValue3> optional3
    )
    {
        return Optional<Maybe<T>, TValue3>.Of(
            getter: source =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return Nothing<TValue3>();
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return Nothing<TValue3>();
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return Nothing<TValue3>();
                }

                return value3;
            },
            setter: (source, value) =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return source;
                }

                var newValue2 = optional3.Set(value2, value);
                var newValue1 = optional2.Set(value1, newValue2.Value);
                var newValue0 = optional1.Set(value0, newValue1.Value);

                return newValue0;
            }
        );
    }

    public static Optional<T, TValue4> Compose<T, TValue1, TValue2, TValue3, TValue4>(
        Optional<T, TValue1> optional1,
        Optional<TValue1, TValue2> optional2,
        Optional<TValue2, TValue3> optional3,
        Optional<TValue3, TValue4> optional4
    )
    {
        return Optional<T, TValue4>.Of(
            getter: source =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return Nothing<TValue4>();
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return Nothing<TValue4>();
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return Nothing<TValue4>();
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return Nothing<TValue4>();
                }

                return value4;
            },
            setter: (source, value) =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return source;
                }

                var newValue3 = optional4.Set(value3.Value, value);
                var newValue2 = optional3.Set(value2.Value, newValue3);
                var newValue1 = optional2.Set(value1.Value, newValue2);
                var newValue0 = optional1.Set(value0.Value, newValue1);

                return newValue0;
            }
        );
    }

    public static Optional<Maybe<T>, TValue4> Compose<T, TValue1, TValue2, TValue3, TValue4>(
        Optional<Maybe<T>, TValue1> optional1,
        Optional<Maybe<TValue1>, TValue2> optional2,
        Optional<Maybe<TValue2>, TValue3> optional3,
        Optional<Maybe<TValue3>, TValue4> optional4
    )
    {
        return Optional<Maybe<T>, TValue4>.Of(
            getter: source =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return Nothing<TValue4>();
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return Nothing<TValue4>();
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return Nothing<TValue4>();
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return Nothing<TValue4>();
                }

                return value4;
            },
            setter: (source, value) =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return source;
                }

                var newValue3 = optional4.Set(value3, value);
                var newValue2 = optional3.Set(value2, newValue3.Value);
                var newValue1 = optional2.Set(value1, newValue2.Value);
                var newValue0 = optional1.Set(value0, newValue1.Value);

                return newValue0;
            }
        );
    }

    public static Optional<T, TValue5> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5>(
        Optional<T, TValue1> optional1,
        Optional<TValue1, TValue2> optional2,
        Optional<TValue2, TValue3> optional3,
        Optional<TValue3, TValue4> optional4,
        Optional<TValue4, TValue5> optional5
    )
    {
        return Optional<T, TValue5>.Of(
            getter: source =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                var value5 = optional5.Get(value4.Value);
                if (value5.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                return value5;
            },
            setter: (source, value) =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return source;
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return source;
                }

                var newValue4 = optional5.Set(value4.Value, value);
                var newValue3 = optional4.Set(value3.Value, newValue4);
                var newValue2 = optional3.Set(value2.Value, newValue3);
                var newValue1 = optional2.Set(value1.Value, newValue2);
                var newValue0 = optional1.Set(value0.Value, newValue1);

                return newValue0;
            }
        );
    }

    public static Optional<Maybe<T>, TValue5> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5>(
        Optional<Maybe<T>, TValue1> optional1,
        Optional<Maybe<TValue1>, TValue2> optional2,
        Optional<Maybe<TValue2>, TValue3> optional3,
        Optional<Maybe<TValue3>, TValue4> optional4,
        Optional<Maybe<TValue4>, TValue5> optional5
    )
    {
        return Optional<Maybe<T>, TValue5>.Of(
            getter: source =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                var value5 = optional5.Get(value4);
                if (value5.IsNothing)
                {
                    return Nothing<TValue5>();
                }

                return value5;
            },
            setter: (source, value) =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return source;
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return source;
                }

                var newValue4 = optional5.Set(value4, value);
                var newValue3 = optional4.Set(value3, newValue4.Value);
                var newValue2 = optional3.Set(value2, newValue3.Value);
                var newValue1 = optional2.Set(value1, newValue2.Value);
                var newValue0 = optional1.Set(value0, newValue1.Value);

                return newValue0;
            }
        );
    }

    public static Optional<T, TValue6> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(
        Optional<T, TValue1> optional1,
        Optional<TValue1, TValue2> optional2,
        Optional<TValue2, TValue3> optional3,
        Optional<TValue3, TValue4> optional4,
        Optional<TValue4, TValue5> optional5,
        Optional<TValue5, TValue6> optional6
    )
    {
        return Optional<T, TValue6>.Of(
            getter: source =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value5 = optional5.Get(value4.Value);
                if (value5.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value6 = optional6.Get(value5.Value);
                if (value6.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                return value6;
            },
            setter: (source, value) =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return source;
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return source;
                }

                var value5 = optional5.Get(value4.Value);
                if (value5.IsNothing)
                {
                    return source;
                }

                var newValue5 = optional6.Set(value5.Value, value);
                var newValue4 = optional5.Set(value4.Value, newValue5);
                var newValue3 = optional4.Set(value3.Value, newValue4);
                var newValue2 = optional3.Set(value2.Value, newValue3);
                var newValue1 = optional2.Set(value1.Value, newValue2);
                var newValue0 = optional1.Set(value0.Value, newValue1);

                return newValue0;
            }
        );
    }

    public static Optional<Maybe<T>, TValue6> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(
        Optional<Maybe<T>, TValue1> optional1,
        Optional<Maybe<TValue1>, TValue2> optional2,
        Optional<Maybe<TValue2>, TValue3> optional3,
        Optional<Maybe<TValue3>, TValue4> optional4,
        Optional<Maybe<TValue4>, TValue5> optional5,
        Optional<Maybe<TValue5>, TValue6> optional6
    )
    {
        return Optional<Maybe<T>, TValue6>.Of(
            getter: source =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value5 = optional5.Get(value4);
                if (value5.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                var value6 = optional6.Get(value5);
                if (value6.IsNothing)
                {
                    return Nothing<TValue6>();
                }

                return value6;
            },
            setter: (source, value) =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return source;
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return source;
                }

                var value5 = optional5.Get(value4);
                if (value5.IsNothing)
                {
                    return source;
                }

                var newValue5 = optional6.Set(value5, value);
                var newValue4 = optional5.Set(value4, newValue5.Value);
                var newValue3 = optional4.Set(value3, newValue4.Value);
                var newValue2 = optional3.Set(value2, newValue3.Value);
                var newValue1 = optional2.Set(value1, newValue2.Value);
                var newValue0 = optional1.Set(value0, newValue1.Value);

                return newValue0;
            }
        );
    }

    public static Optional<T, TValue7> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(
        Optional<T, TValue1> optional1,
        Optional<TValue1, TValue2> optional2,
        Optional<TValue2, TValue3> optional3,
        Optional<TValue3, TValue4> optional4,
        Optional<TValue4, TValue5> optional5,
        Optional<TValue5, TValue6> optional6,
        Optional<TValue6, TValue7> optional7
    )
    {
        return Optional<T, TValue7>.Of(
            getter: source =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value5 = optional5.Get(value4.Value);
                if (value5.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value6 = optional6.Get(value5.Value);
                if (value6.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value7 = optional7.Get(value6.Value);
                if (value7.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                return value7;
            },
            setter: (source, value) =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return source;
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return source;
                }

                var value5 = optional5.Get(value4.Value);
                if (value5.IsNothing)
                {
                    return source;
                }

                var value6 = optional6.Get(value5.Value);
                if (value6.IsNothing)
                {
                    return source;
                }

                var newValue6 = optional7.Set(value6.Value, value);
                var newValue5 = optional6.Set(value5.Value, newValue6);
                var newValue4 = optional5.Set(value4.Value, newValue5);
                var newValue3 = optional4.Set(value3.Value, newValue4);
                var newValue2 = optional3.Set(value2.Value, newValue3);
                var newValue1 = optional2.Set(value1.Value, newValue2);
                var newValue0 = optional1.Set(value0.Value, newValue1);

                return newValue0;
            }
        );
    }

    public static Optional<Maybe<T>, TValue7> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(
        Optional<Maybe<T>, TValue1> optional1,
        Optional<Maybe<TValue1>, TValue2> optional2,
        Optional<Maybe<TValue2>, TValue3> optional3,
        Optional<Maybe<TValue3>, TValue4> optional4,
        Optional<Maybe<TValue4>, TValue5> optional5,
        Optional<Maybe<TValue5>, TValue6> optional6,
        Optional<Maybe<TValue6>, TValue7> optional7
    )
    {
        return Optional<Maybe<T>, TValue7>.Of(
            getter: source =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value5 = optional5.Get(value4);
                if (value5.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value6 = optional6.Get(value5);
                if (value6.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                var value7 = optional7.Get(value6);
                if (value7.IsNothing)
                {
                    return Nothing<TValue7>();
                }

                return value7;
            },
            setter: (source, value) =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return source;
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return source;
                }

                var value5 = optional5.Get(value4);
                if (value5.IsNothing)
                {
                    return source;
                }

                var value6 = optional6.Get(value5);
                if (value6.IsNothing)
                {
                    return source;
                }

                var newValue6 = optional7.Set(value6, value);
                var newValue5 = optional6.Set(value5, newValue6.Value);
                var newValue4 = optional5.Set(value4, newValue5.Value);
                var newValue3 = optional4.Set(value3, newValue4.Value);
                var newValue2 = optional3.Set(value2, newValue3.Value);
                var newValue1 = optional2.Set(value1, newValue2.Value);
                var newValue0 = optional1.Set(value0, newValue1.Value);

                return newValue0;
            }
        );
    }

    public static Optional<T, TValue8> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(
        Optional<T, TValue1> optional1,
        Optional<TValue1, TValue2> optional2,
        Optional<TValue2, TValue3> optional3,
        Optional<TValue3, TValue4> optional4,
        Optional<TValue4, TValue5> optional5,
        Optional<TValue5, TValue6> optional6,
        Optional<TValue6, TValue7> optional7,
        Optional<TValue7, TValue8> optional8
    )
    {
        return Optional<T, TValue8>.Of(
            getter: source =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value5 = optional5.Get(value4.Value);
                if (value5.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value6 = optional6.Get(value5.Value);
                if (value6.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value7 = optional7.Get(value6.Value);
                if (value7.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value8 = optional8.Get(value7.Value);
                if (value8.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                return value8;
            },
            setter: (source, value) =>
            {
                var value0 = Just(source);

                var value1 = optional1.Get(value0.Value);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1.Value);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2.Value);
                if (value3.IsNothing)
                {
                    return source;
                }

                var value4 = optional4.Get(value3.Value);
                if (value4.IsNothing)
                {
                    return source;
                }

                var value5 = optional5.Get(value4.Value);
                if (value5.IsNothing)
                {
                    return source;
                }

                var value6 = optional6.Get(value5.Value);
                if (value6.IsNothing)
                {
                    return source;
                }

                var value7 = optional7.Get(value6.Value);
                if (value7.IsNothing)
                {
                    return source;
                }

                var newValue7 = optional8.Set(value7.Value, value);
                var newValue6 = optional7.Set(value6.Value, newValue7);
                var newValue5 = optional6.Set(value5.Value, newValue6);
                var newValue4 = optional5.Set(value4.Value, newValue5);
                var newValue3 = optional4.Set(value3.Value, newValue4);
                var newValue2 = optional3.Set(value2.Value, newValue3);
                var newValue1 = optional2.Set(value1.Value, newValue2);
                var newValue0 = optional1.Set(value0.Value, newValue1);

                return newValue0;
            }
        );
    }

    public static Optional<Maybe<T>, TValue8> Compose<T, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(
        Optional<Maybe<T>, TValue1> optional1,
        Optional<Maybe<TValue1>, TValue2> optional2,
        Optional<Maybe<TValue2>, TValue3> optional3,
        Optional<Maybe<TValue3>, TValue4> optional4,
        Optional<Maybe<TValue4>, TValue5> optional5,
        Optional<Maybe<TValue5>, TValue6> optional6,
        Optional<Maybe<TValue6>, TValue7> optional7,
        Optional<Maybe<TValue7>, TValue8> optional8
    )
    {
        return Optional<Maybe<T>, TValue8>.Of(
            getter: source =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value5 = optional5.Get(value4);
                if (value5.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value6 = optional6.Get(value5);
                if (value6.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value7 = optional7.Get(value6);
                if (value7.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                var value8 = optional8.Get(value7);
                if (value8.IsNothing)
                {
                    return Nothing<TValue8>();
                }

                return value8;
            },
            setter: (source, value) =>
            {
                var value0 = source;

                var value1 = optional1.Get(value0);
                if (value1.IsNothing)
                {
                    return source;
                }

                var value2 = optional2.Get(value1);
                if (value2.IsNothing)
                {
                    return source;
                }

                var value3 = optional3.Get(value2);
                if (value3.IsNothing)
                {
                    return source;
                }

                var value4 = optional4.Get(value3);
                if (value4.IsNothing)
                {
                    return source;
                }

                var value5 = optional5.Get(value4);
                if (value5.IsNothing)
                {
                    return source;
                }

                var value6 = optional6.Get(value5);
                if (value6.IsNothing)
                {
                    return source;
                }

                var value7 = optional7.Get(value6);
                if (value7.IsNothing)
                {
                    return source;
                }

                var newValue7 = optional8.Set(value7, value);
                var newValue6 = optional7.Set(value6, newValue7.Value);
                var newValue5 = optional6.Set(value5, newValue6.Value);
                var newValue4 = optional5.Set(value4, newValue5.Value);
                var newValue3 = optional4.Set(value3, newValue4.Value);
                var newValue2 = optional3.Set(value2, newValue3.Value);
                var newValue1 = optional2.Set(value1, newValue2.Value);
                var newValue0 = optional1.Set(value0, newValue1.Value);

                return newValue0;
            }
        );
    }
}
